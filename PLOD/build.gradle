apply plugin: 'com.android.application'


//android.applicationVariants.all { variant ->
//    variant.mergeResources.doFirst {
//        def isReleaseMode = false
//        for(String s : gradle.startParameter.taskNames) {
//            if(s.contains("Release")) {
//                isReleaseMode=true
//                break
//            }
//        }
//        if (isReleaseMode)
//        {
//            android.sourceSets.main.assets.srcDirs = ['src/main/assets_release']
//            android.sourceSets.debug.assets.srcDirs = ['src/main/assets_release']
//            android.sourceSets.release.assets.srcDirs = ['src/main/assets_release']
//        }
//    }
//}

//android.sourceSets.main.assets.srcDirs = ['src/main/assets_release']
//android.sourceSets.debug.assets.srcDirs = ['src/main/assets_release']

def zhuanXiegang(){
    return rootProject.projectDir.getPath().replace('\\', '\\\\');
}

// Load keystore
def keystorePropertiesFile = rootProject.file("PLOD/keystore.properties");
def keystoreDefined = keystorePropertiesFile.exists();
def loadProps(file){
    def props = new Properties();
    props.load(new FileInputStream(file))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }
}
if (keystoreDefined) {
    loadProps(keystorePropertiesFile)
}
loadProps(rootProject.file("PLOD/version.properties"))
def isDevBuild = keystoreDefined || rootProject.file("PLOD/src/main/assets_release").exists();

if(isDevBuild) {
    android.sourceSets.release.assets.srcDirs = ['src/main/assets_release']
}

android {
    tasks.whenTaskAdded { task ->
        if (task.name.contains("lint")
//如果instant run不生效，把clean这行干掉
                ||task.name.equals("clean")
                //如果项目中有用到aidl则不可以舍弃这个任务
                ||task.name.contains("Aidl")
//用不到测试的时候就可以先关闭
                ||task.name.contains("mockableAndroidJar")
                ||task.name.contains("UnitTest")
                ||task.name.contains("AndroidTest")
//用不到NDK和JNI的也关闭掉
                || task.name.contains("Ndk")
                || task.name.contains("Jni")
        ) {
            task.enabled = true
        }
    }

    lintOptions {
        //tasks.lint.enabled = false
        checkReleaseBuilds false
        abortOnError false
    }
    compileSdkVersion ver_compileSdkVersion

    //签名设置
    signingConfigs {
//        release {
//            v1SigningEnabled true
//            v2SigningEnabled true
//            enableV3Signing = true
//            enableV4Signing = true
//        }
        debug {
            if (keystoreDefined) {
                storeFile file(keys_storeFile)
                storePassword keys_storePassword
                keyAlias keys_keyAlias
                keyPassword keys_keyPassword
            }
        }
    }

    defaultConfig {
        applicationId "com.knziha.plod.plaindict"
        minSdkVersion ver_minsdk
        targetSdkVersion ver_aimsdk
        versionCode Integer.parseInt(ver_number)
        versionName ver_name
        vectorDrawables.generatedDensities = ['hdpi']
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//        }
//    }

    buildFeatures {
        dataBinding = true
    }
//    dataBinding{
//        enabled=true
//    }
    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        debug {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            buildConfigField "boolean","isDebug","true"
            buildConfigField "boolean","isDevBuild","${isDevBuild}"
            buildConfigField "boolean","stripMet","!isDebug && ${isDevBuild}"
            //buildConfigField "boolean","stripMet","true"
            buildConfigField "String","projectPath","\"${zhuanXiegang()}\""
            aaptOptions {
                ignoreAssetsPattern '!Markjs:!pdfjs:!Search'
            }
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            buildConfigField "boolean","isDebug","false"
            buildConfigField "boolean","isDevBuild","${isDevBuild}"
            buildConfigField "boolean","stripMet","!isDebug && ${isDevBuild}"
            buildConfigField "String","projectPath","\"${zhuanXiegang()}\""
        }
    }

    sourceSets {
        def isReleaseMode = false
        for(String s : gradle.startParameter.taskNames) {
            if(s.contains("Release")) {
                isReleaseMode=true
                break
            }
        }
        main {
            if(isReleaseMode && isDevBuild) {
                assets.srcDirs = ['src/main/assets_release']
            }
        }
    }
}

task delog {
    group 'delog'
    description 'delog'
    doLast {
        def gradle = project.getGradle()
        new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
            if (it.getName().endsWith('.out.log')) {
                logger.debug("Cleaning up daemon log file $it")
                it.delete()
            }
        }
    }
}

configurations {
    compile.exclude group:'androidx.core', module: 'core'
    all*.exclude group:'androidx.core', module: 'core'
    all*.exclude group:'androidx.viewpager', module: 'viewpager'
    all*.exclude group:'androidx.appcompat', module: 'appcompat'
    all*.exclude group:'androidx.recyclerview', module: 'recyclerview' // todo  check
    all*.exclude group:'com.github.wseemann', module: 'FFmpegMediaMetadataRetriever'
}

dependencies {
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    configurations {
        all {
            exclude module: 'httpclient'
            exclude module: 'commons-logging'
        }
    }
    //api 'com.implimentz:unsafe:0.0.6'

    //api "com.github.luben:zstd-jni:1.5.0-4@aar"

    //api 'org.lz4:lz4-pure-java:1.8.0'

    implementation 'com.alibaba:fastjson:1.2.62'
    api (libs_coordinator)
    //api 'org.jruby.joni:joni:2.1.30'
    //api 'org.jruby.jcodings:jcodings:1.0.55'
    //implementation 'com.android.support:support-dynamic-animation:27.1.1'
    api 'org.anarres.lzo:lzo-core:1.0.6'
    api libs_viewpager
    api libs_guest
    //implementation 'com.android.volley:volley:1.2.0'

    testImplementation 'org.jdom:jdom:2.0.2'

    compileOnly libs_metaline
    annotationProcessor libs_metaline
    testImplementation libs_metaline
    testAnnotationProcessor libs_metaline

    testImplementation 'com.google.javascript:closure-compiler:v20211107'

    api (libs_drawer)
    api (libs_ctext)
    api libs_recyclerScroll
    api libs_twoway
    api(libs_compat)
    api libs_mat
    api libs_pref

    api libs_color
    api (libs_file)

    api libs_paging

    api fileTree(include: ['*.jar'], dir: 'libs')
    api(libs_anno)
    testImplementation 'junit:junit:4.12'
    //implementation 'me.weishu:free_reflection:2.1.0'
    api ('androidx.palette:palette:1.0.0'){
        exclude module:"core"
    }
    implementation 'org.jetbrains:annotations:15.0'

    implementation "io.noties.markwon:core:4.5.0"
    implementation "io.noties.markwon:image:4.5.0"
    //api ('com.github.barteksc:pdfium-android:1.9.0')

//    implementation 'com.bytedance.boost_multidex:boost_multidex:1.0.1'

    implementation 'com.squareup.okhttp3:okhttp:3.12.13'
    //implementation 'org.simpleframework:simple-xml:2.7.1'

    implementation ('androidx.percentlayout:percentlayout:1.0.0'){
        exclude module:"core"
    }


//    api 'org.apache.lucene:lucene-core:8.0.0'

    //api 'org.apache.lucene:lucene-core:4.7.0'
    api libs_lucene
    api ('org.apache.lucene:lucene-queryparser:4.7.0'){
        exclude module:"lucene-core"
    }
    api ('org.apache.lucene:lucene-highlighter:4.7.0'){
        exclude module:"lucene-core"
    }
    api ('org.apache.lucene:lucene-analyzers-common:4.7.0'){
        exclude module:"lucene-core"
    }

    api ('com.janeluo:ikanalyzer:2012_u6'){
        exclude module:"lucene-core"
    }

    //api 'com.ibm.icu:icu4j:70.1'

    implementation 'org.jsoup:jsoup:1.15.3'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'


    // implementation fileTree(dir: 'lib', include: ['*.jar'])
}

afterEvaluate {
    gradle.afterProject {}
    gradle.buildFinished{ BuildResult buildResult ->
//        URL requestURL = new URL("http://localhost:8080/GC.jsp");
//        HttpURLConnection urlConnection = requestURL.openConnection();
//        urlConnection.setRequestMethod("GET");
//        urlConnection.setConnectTimeout(350);
//        urlConnection.connect();
//        urlConnection.getInputStream();
//        urlConnection.disconnect();

        if (buildResult.failure) {
            ['powershell', """(New-Object Media.SoundPlayer "D:\\Downloads\\music\\error.wav").PlaySync();"""].execute()
            println("failed doing task")
        } else {
            ['powershell', """(New-Object Media.SoundPlayer "D:\\Downloads\\music\\muse_SchivoNo.2.wav").PlaySync();"""].execute()
            println("build finished")
        }

    }
}

